#!/usr/bin/env bash
# Copyright 2018 Adam Schaefers sch@efers.org
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Bootstrap a custom zfs-on-root NixOS install with custom settings in one command.

# Usage: themelios <git-url> <host.nix>

# Example command: "themelios https://github.com/a-schaefers/nix-config.git hpZ620.nix"
# Where hpZ620.nix is in the project_root/hosts/ directory and contains a "bootstrap block."

# A "bootstrap block" is just bash variables prefixed with #| as follows:

# Where we clone the git repo.
# Beginning and Trailing slashes required + must be a root level directory
#|NIXCFG_LOCATION=/nix-config/

# The pool disks must be on one line separated by spaces:
# Using /dev/disk/by-id is preferable.
#|POOL_DISKS=/dev/sda /dev/sdb /dev/sdc

# May be "single" "mirror" "raidz1" etc...
#|POOL_TYPE=raidz1

# The name of the zpool. Typically zroot or rpool. It may be anything.
#|POOL_NAME=zroot

# The 32-bit host ID of the machine, formatted as 8 hexadecimal characters.
# You should try to make this ID unique among your machines.
#|POOL_HOSTID=random

# Whether or not to use sgdisk and wipefs to remove disk partition tables and signatures
# Useful if the disk is not brand new, and you don't want to wait to zero the disks entirely.
#|REMOVE_REMNANTS=true

# Whether or not to use "atime", leave to false if using SSD to reduce disk writes.
#|ATIME=false

# Set com.sun:auto-snapshot property on various datasets.
#|SNAPSHOT_ROOT=true
#|SNAPSHOT_HOME=true


#|USE_ZSWAP=false
#|ZSWAP_SIZE=4G
# Note: Use POOL_TYPE=single for single disk setups or POOL_TYPE=mirror for mirrored setups.

# Here is an example of a .nix file with a "bootstrap block",
# https://github.com/a-schaefers/nix-config/blob/master/hosts/latitudeE6430.nix

# Here is a sample nixos-zfs.nix file for reference, which contains good ZFS settings,
# https://github.com/a-schaefers/nix-config/blob/master/modules/nixos/nixos-zfs.nix

usage() {
        cat << EOF
Usage : themelios <git-url> <host.nix>
EOF
        exit
}
[ $# -eq 2 ] || usage
NIXCFG_REPO=$1
NIXCFG_HOST=$2

__initial_warning() {
    echo "WARNING: The following script intends to replace all of your disk(s) \
contents with a zfs-on-root NixOS installation and bootstrap your configuration.nix."
    read -p "Ready? (Y or N) " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        echo "Aborted." ; exit
    fi
}

__uefi_or_legacy() {
    # TODO add uefi support.
    if [ -d "/sys/firmware/efi/efivars" ]; then
        exit ; echo "Only legacy bios is supported with this script for now."
    fi
}

__switch_if_needed() {
    if [[ ${NEEDS_SWITCH} == "true" ]]
    then
        nixos-rebuild switch || exit ; echo "nixos-rebuild switch from switch_if_needed failed"
        NEEDS_SWITCH="false"
    fi
}

__bootstrap_zfs() {
    __install_zfs() {
            sed -i '/imports/a \
boot.supportedFilesystems = [ \"zfs\" ];' \
        /etc/nixos/configuration.nix
    NEEDS_SWITCH="true"
    }
    which zfs > /dev/null 2>&1 || __install_zfs
}

__bootstrap_git() {
    __install_git() {
     sed -i '/imports/a \
 environment.systemPackages = with pkgs; [ git ];' \
        /etc/nixos/configuration.nix
    NEEDS_SWITCH="true"
    }
    which git > /dev/null 2>&1 || __install_git
}

__get_custom_nixcfg() {
    echo "Fetching git repository to /tmp location..."
    git clone ${NIXCFG_REPO} /tmp/NIXCFG_REPO || echo "git clone failed" ; exit

    echo "Extracting configuration variables from bootstrap block..."
    BOOTSTRAP_BLOCK=$(grep "#|" /tmp/NIXCFG_REPO/hosts/${NIXCFG_HOST} | cut -d '|' -f 2)
    IFS=$'\n'
    for CFG_VAR in ${BOOTSTRAP_BLOCK}
    do
        export ${CFG_VAR}
        echo "${CFG_VAR}"
    done
    POOL_DISKS=$(echo $POOL_DISKS | sed 's/ /\n/g')
    echo "POOL_DISKS parsed as: ${POOL_DISKS}"

    # translate configuration options if needed.
    echo "Translating configuration options..."
    if [[ ${ATIME} == "true" ]]
    then
        ATIME="on"
    else
        ATIME="off"
    fi
    if [[ ${POOL_TYPE} == "single" ]]
    then
        POOL_TYPE=""
    fi
}

__disk_prep() {
    if [[ ${REMOVE_REMNANTS} == "true" ]]
    then
        IFS=$'\n'
        for DISK_ID in ${POOL_DISKS}
        do
            echo "Clearing disk with sgdisk..."
            sgdisk --clear ${DISK_ID} || echo "sgdisk --clear failed" ; exit
            echo "Wiping disk signatures with wipefs..."
            wipefs --all ${DISK_ID} || echo "wipefs --all failed" ; exit
        done
    fi
}

__zpool_create() {
    echo "Creating zpool..."
    zpool create -f \
          -o ashift=12 \
          -O compression=lz4 \
          -O atime=${ATIME:?"Please define atime."} \
          -O relatime=on \
          -O normalization=formD \
          -O xattr=sa \
          -m none \
          -R /mnt \
          ${POOL_NAME:?"Please define pool name."} \
          ${POOL_TYPE} \
          ${POOL_DISKS:?"Please define pool disks."} || echo "pool creation failed." ; exit

    IFS=$'\n'
    for DISK_ID in ${POOL_DISKS}
    do
        echo "Creating BIOS boot partition..."
        sgdisk -a1 -n2:48:2047 -t2:EF02 -c2:"BIOS boot partition" ${DISK_ID} || echo "bios boot partition creation failed" ; exit
        partx -u ${DISK_ID}
    done
}

__datasets_create() {
    Echo "Creating and mounting datasets in /mnt..."
    # / (root) datasets
    zfs create -o mountpoint=none -o canmount=off -o sync=always ${POOL_NAME}/ROOT
    zfs create -o mountpoint=legacy -o canmount=on ${POOL_NAME}/ROOT/nixos
    zpool set bootfs=${POOL_NAME}/ROOT/nixos ${POOL_NAME}
    mount -t zfs ${POOL_NAME}/ROOT/nixos /mnt

    mkdir /mnt/{home,tmp}

    # /home datasets
    zfs create -o mountpoint=none -o canmount=off ${POOL_NAME}/HOME
    zfs create -o mountpoint=legacy -o canmount=on ${POOL_NAME}/HOME/home
    mount -t zfs ${POOL_NAME}/HOME/home /mnt/home

    # /tmp datasets
    zfs create -o mountpoint=none -o canmount=off ${POOL_NAME}/TMP
    zfs create -o mountpoint=legacy -o canmount=on -o sync=disabled ${POOL_NAME}/TMP/tmp
    mount -t zfs ${POOL_NAME}/TMP/tmp /mnt/tmp

    # zswap option
    if [[ ${USE_ZSWAP} == "true" ]]
    then
        echo "Creation ZSWAP volume and turning on swap..."
        zfs create \
            -o primarycache=metadata \
            -o secondarycache=metadata \
            -o compression=zle \
            -o sync=always \
            -o logbias=throughput \
            -o com.sun:auto-snapshot=false \
            ${POOL_NAME}/SWAP

        zfs create \
            -V ${ZSWAP_SIZE} \
            -b $(getconf PAGESIZE) \
            ${POOL_NAME}/SWAP/swap0

        mkswap -f /dev/zvol/${POOL_NAME}/SWAP/swap0
        swapon /dev/zvol/${POOL_NAME}/SWAP/swap0
    fi
}

__zfs_auto_snapshot() {
    if [[ ${SNAPSHOT_HOME} == "true" ]]
    then
        echo "Setting com.sun:auto-snapshot=true for HOME datasets..."
        zfs set com.sun:auto-snapshot=true ${POOL_NAME}/HOME
    elif [[ ${SNAPSHOT_ROOT} == "false" ]]
         then
        echo "Setting com.sun:auto-snapshot=false for HOME datasets..."
        zfs set com.sun:auto-snapshot=false ${POOL_NAME}/HOME
    fi

    if [[ ${SNAPSHOT_ROOT} == "true" ]]
    then
        echo "Setting com.sun:auto-snapshot=true for ROOT datasets..."
        zfs set com.sun:auto-snapshot=true ${POOL_NAME}/ROOT
    elif [[ ${SNAPSHOT_ROOT} == "false" ]]
    then
        echo "Setting com.sun:auto-snapshot=false for ROOT datasets..."
        zfs set com.sun:auto-snapshot=false ${POOL_NAME}/ROOT
    fi
}

__bootstrap_nixcfg() {
    echo "Moving repo from /tmp to /mnt${NIXCFG_LOCATION}..."
    cp -rp /tmp/NIXCFG_REPO /mnt${NIXCFG_LOCATION}

    "Executing nixos-generate-config --root /mnt"
    nixos-generate-config --root /mnt || echo "nixos-generate-config --root /mnt failed" ; exit

    if [[ ${POOL_HOSTID} == "random" ]]
    then
        echo "Generating random hostid..."
        POOL_HOSTID="$(head -c4 /dev/urandom | od -A none -t x4 | cut -d ' ' -f 2)"
        echo "${POOL_HOSTID}"
    fi

    cat <<EOF > /mnt/etc/nixos/configuration.nix
{ ... }:
{ imports = [
./hardware-configuration.nix
];
networking.hostId = "${POOL_HOSTID}";
}
EOF
    sed -i "/imports/a ../..${NIXCFG_LOCATION}hosts/${NIXCFG_HOST}" \
        /mnt/etc/nixos/configuration.nix

    if [[ ${DBG_MODE} == "" ]]
    then
        nixos-install --root /mnt ||  echo "nixos-install --root /mnt failed" ; exit
    fi
}

__thank_you() {
    cat <<EOF
NNNNNNNN        NNNNNNNNIIIIIIIIIIXXXXXXX       XXXXXXX
N:::::::N       N::::::NI::::::::IX:::::X       X:::::X
N::::::::N      N::::::NI::::::::IX:::::X       X:::::X
N:::::::::N     N::::::NII::::::IIX::::::X     X::::::X
N::::::::::N    N::::::N  I::::I  XXX:::::X   X:::::XXX
N:::::::::::N   N::::::N  I::::I     X:::::X X:::::X
N:::::::N::::N  N::::::N  I::::I      X:::::X:::::X
N::::::N N::::N N::::::N  I::::I       X:::::::::X
N::::::N  N::::N:::::::N  I::::I       X:::::::::X
N::::::N   N:::::::::::N  I::::I      X:::::X:::::X
N::::::N    N::::::::::N  I::::I     X:::::X X:::::X
N::::::N     N:::::::::N  I::::I  XXX:::::X   X:::::XXX
N::::::N      N::::::::NII::::::IIX::::::X     X::::::X
N::::::N       N:::::::NI::::::::IX:::::X       X:::::X
N::::::N        N::::::NI::::::::IX:::::X       X:::::X
NNNNNNNN         NNNNNNNIIIIIIIIIIXXXXXXX       XXXXXXX
EOF

    umount /mnt/home
    umount /mnt/tmp
    umount /mnt
    zpool export ${POOL_NAME}

    read -p "Finished. Reboot now? (Y or N) " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        reboot
    fi

    exit
}

__uefi_or_legacy       # check for legacy or uefi bios
__initial_warning      # warn user of potential doom
__bootstrap_zfs        # install zfs if needed to the livedisk
__bootstrap_git        # install git if needed to the livedisk
__switch_if_needed     # reconfigure nix livedisk if needed
__get_custom_nixcfg    # download the host machine configuration
__disk_prep            # use sgdisk and wipefs to cleanup old disks
__zpool_create         # create the zpool, make gpt bios boot partition
__datasets_create      # create a zfs dataset layout
__zfs_auto_snapshot    # set com.sun:auto-snapshot properties
__bootstrap_nixcfg     # bootstrap the users custom nix configurations
__thank_you            # May you have a Happy Hacking. :)
