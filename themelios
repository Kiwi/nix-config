#!/usr/bin/env bash
# Copyright 2018 Adam Schaefers sch@efers.org
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

usage() {
        cat << EOF
Usage : themelios <git remote> <host.nix>
Where host.nix is in the project_root/hosts/ directory and contains a "bootstrap block."

Use -h or --help for more instructions.
EOF
        exit
}

help() {
    cat <<EOF
Themelios - Bootstrap a zfs-on-root NixOS in one-shot.

Usage : themelios <git remote> <host.nix>
Where host.nix is in the project_root/hosts/ directory and contains a "bootstrap block."

For Example:

        themelios https://github.com/a-schaefers/nix-config.git hpZ620.nix

Github users may also use a shorthand:

       themelios a-schaefers/nix-config hpZ620.nix

The idea of project_root/hosts/ is that it contains all machine-specific NixOS
configurations, including any and all imports--
(just use relative path imports!)

The /etc/nixos/configuration.nix file created by themelios will simply import
your host.nix file. You may place all of your per-machine configurations in this
 file and themelios will bootstrap your machine.

A Bootstrap block in a project_root/hosts/host.nix file needs to be formatted
as follows:

  #|POOL_NAME=zroot
  #|POOL_TYPE=raidz1
  #|POOL_DISKS=/dev/sda /dev/sdb /dev/sdc
  #|POOL_HOSTID=random
  #|WIPEFS_ALL=true
  #|SGDISK_CLEAR=true
  #|ZERO_DISKS=false
  #|ATIME=false
  #|SNAPSHOT_ROOT=true
  #|SNAPSHOT_HOME=true
  #|USE_ZSWAP=false
  #|ZSWAP_SIZE=4G
  #|NIXCFG_LOCATION=/nix-config/

Notes:
-Set one variable per line beginning with #| (NO LINE BREAKS / NO QUOTES)
-POOL_TYPE needs to be single,mirror,raidz1,raidz2,raidz3
-POOL_DISKS should be separated by spaces and using /dev/disk/by-id is
recommended but not required.
-Using both WIPEFS_ALL And SGDISK_CLEAR is recommended for used disks unless you are
zeroing them.
-ATIME is not recommended for use with SSD.
-Swapping is not a great idea with ZFS, but it is an option.
EOF
}

[[ $1 == "-h" ]] && help
[[ $1 == "--help" ]] && help
[[ $# -eq 2 ]] || usage
NIXCFG_REPO=$1
NIXCFG_HOST=$2

__initial_warning() {
    echo "WARNING: The following script intends to replace all of your disk(s) \
contents with a zfs-on-root NixOS installation and bootstrap your configuration.nix."
    read -p "Ready? (Y or N) " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        echo "Aborted." ; exit
    fi
}

__uefi_or_legacy() {
    # TODO add uefi support.
    if [ -d "/sys/firmware/efi/efivars" ]; then
        exit ; echo "Only legacy bios is supported with this script for now."
    fi
}

__switch_if_needed() {
    if [[ ${NEEDS_SWITCH} == "true" ]]
    then
        nixos-rebuild switch || exit ; echo "nixos-rebuild switch from switch_if_needed failed"
        NEEDS_SWITCH="false"
    fi
}

__bootstrap_zfs() {
    __install_zfs() {
            sed -i '/imports/a \
boot.supportedFilesystems = [ \"zfs\" ];' \
        /etc/nixos/configuration.nix
    NEEDS_SWITCH="true"
    }
    which zfs > /dev/null 2>&1 || __install_zfs
}

__bootstrap_git() {
    __install_git() {
     sed -i '/imports/a \
 environment.systemPackages = with pkgs; [ git ];' \
        /etc/nixos/configuration.nix
    NEEDS_SWITCH="true"
    }
    which git > /dev/null 2>&1 || __install_git
}

__get_custom_nixcfg() {

    # for github users we clone https but we switch to ssh remote for interactive convenience.
    GITHUB_USER=$(echo ${NIXCFG_REPO} | grep github | cut -d '/' -f 4)
    GITHUB_REPO=$(echo $NIXCFG_REPO | grep github | cut -d '/' -f 5)
    GITHUBHTTPSREMOTE=https://github.com/${GITHUB_USER}/${GITHUB_REPO}
    GITHUBSSHREMOTE=git@github.com:${GITHUB_USER}/${GITHUB_REPO}
    if [[ ${GITHUB_USER} != "" ]]
    then
        echo "Fetching github repository to /tmp location via https remote..."
        git clone ${GITHUBHTTPSREMOTE} /tmp/NIXCFG_REPO || exit
        echo "Switching remote to ssh for user convenience..."
        cd /tmp/NIXCFG_REPO
        git remote set-url origin ${GITHUBSSHREMOTE}
    else
        echo "Fetching git repository to /tmp location..."
        git clone ${NIXCFG_REPO} /tmp/NIXCFG_REPO || exit
    fi

    echo "Extracting configuration variables from bootstrap block..."
    BOOTSTRAP_BLOCK=$(grep "#|" /tmp/NIXCFG_REPO/hosts/${NIXCFG_HOST} | cut -d '|' -f 2)
    IFS=$'\n'
    for CFG_VAR in ${BOOTSTRAP_BLOCK}
    do
        export ${CFG_VAR}
        echo "${CFG_VAR}"
    done
    POOL_DISKS=$(echo $POOL_DISKS | sed 's/ /\n/g')
    echo "POOL_DISKS parsed as: ${POOL_DISKS}"

    # translate configuration options if needed.
    echo "Translating configuration options..."
    if [[ ${ATIME} == "true" ]]
    then
        ATIME="on"
    else
        ATIME="off"
    fi
    if [[ ${POOL_TYPE} == "single" ]]
    then
        POOL_TYPE=""
    fi
}

__disk_prep() {
    if [[ ${SGDISK_CLEAR} == "true" ]]
    then
        IFS=$'\n'
        for DISK_ID in ${POOL_DISKS}
        do
            echo "Clearing disk with sgdisk..."
            sgdisk --clear ${DISK_ID} ||  exit
        done
    fi

        if [[ ${WIPEFS_ALL} == "true" ]]
    then
        IFS=$'\n'
        for DISK_ID in ${POOL_DISKS}
        do
            echo "Wiping disk signatures with wipefs..."
            wipefs --all ${DISK_ID} || exit
        done
        fi

        if [[ ${ZERO_DISKS} == "true" ]]
    then
        IFS=$'\n'
        for DISK_ID in ${POOL_DISKS}
        do
            echo "Writing Zeros to each disk, this may take a while..."
            dd if=/dev/zero of=${DISK_ID} bs=4096 status=progress || exit
        done
    fi
}

__zpool_create() {
    echo "Creating zpool..."
    zpool create -f \
          -o ashift=12 \
          -O compression=lz4 \
          -O atime=${ATIME:?"Please define atime."} \
          -O relatime=on \
          -O normalization=formD \
          -O xattr=sa \
          -m none \
          -R /mnt \
          ${POOL_NAME:?"Please define pool name."} \
          ${POOL_TYPE} \
          ${POOL_DISKS:?"Please define pool disks."} || exit

    IFS=$'\n'
    for DISK_ID in ${POOL_DISKS}
    do
        echo "Creating BIOS boot partition..."
        sgdisk -a1 -n2:48:2047 -t2:EF02 -c2:"BIOS boot partition" ${DISK_ID} || exit
        partx -u ${DISK_ID}
    done
}

__datasets_create() {
    echo "Creating and mounting datasets in /mnt..."
    # / (root) datasets
    zfs create -o mountpoint=none -o canmount=off -o sync=always ${POOL_NAME}/ROOT
    zfs create -o mountpoint=legacy -o canmount=on ${POOL_NAME}/ROOT/nixos
    zpool set bootfs=${POOL_NAME}/ROOT/nixos ${POOL_NAME}
    mount -t zfs ${POOL_NAME}/ROOT/nixos /mnt

    mkdir /mnt/{home,tmp}

    # /home datasets
    zfs create -o mountpoint=none -o canmount=off ${POOL_NAME}/HOME
    zfs create -o mountpoint=legacy -o canmount=on ${POOL_NAME}/HOME/home
    mount -t zfs ${POOL_NAME}/HOME/home /mnt/home

    # /tmp datasets
    zfs create -o mountpoint=none -o canmount=off ${POOL_NAME}/TMP
    zfs create -o mountpoint=legacy -o canmount=on -o sync=disabled ${POOL_NAME}/TMP/tmp
    mount -t zfs ${POOL_NAME}/TMP/tmp /mnt/tmp

    # zswap option
    if [[ ${USE_ZSWAP} == "true" ]]
    then
        echo "Creation ZSWAP volume and turning on swap..."
        zfs create \
            -o primarycache=metadata \
            -o secondarycache=metadata \
            -o compression=zle \
            -o sync=always \
            -o logbias=throughput \
            -o com.sun:auto-snapshot=false \
            ${POOL_NAME}/SWAP

        zfs create \
            -V ${ZSWAP_SIZE} \
            -b $(getconf PAGESIZE) \
            ${POOL_NAME}/SWAP/swap0

        mkswap -f /dev/zvol/${POOL_NAME}/SWAP/swap0
        swapon /dev/zvol/${POOL_NAME}/SWAP/swap0
    fi
}

__zfs_auto_snapshot() {
    if [[ ${SNAPSHOT_HOME} == "true" ]]
    then
        echo "Setting com.sun:auto-snapshot=true for HOME datasets..."
        zfs set com.sun:auto-snapshot=true ${POOL_NAME}/HOME
    elif [[ ${SNAPSHOT_ROOT} == "false" ]]
         then
        echo "Setting com.sun:auto-snapshot=false for HOME datasets..."
        zfs set com.sun:auto-snapshot=false ${POOL_NAME}/HOME
    fi

    if [[ ${SNAPSHOT_ROOT} == "true" ]]
    then
        echo "Setting com.sun:auto-snapshot=true for ROOT datasets..."
        zfs set com.sun:auto-snapshot=true ${POOL_NAME}/ROOT
    elif [[ ${SNAPSHOT_ROOT} == "false" ]]
    then
        echo "Setting com.sun:auto-snapshot=false for ROOT datasets..."
        zfs set com.sun:auto-snapshot=false ${POOL_NAME}/ROOT
    fi
}

__bootstrap_nixcfg() {
    echo "Moving repo from /tmp to /mnt${NIXCFG_LOCATION}..."
    cp -rp /tmp/NIXCFG_REPO /mnt${NIXCFG_LOCATION}

    echo "Executing nixos-generate-config --root /mnt"
    nixos-generate-config --root /mnt || exit

    if [[ ${POOL_HOSTID} == "random" ]]
    then
        echo "Generating random hostid..."
        POOL_HOSTID="$(head -c4 /dev/urandom | od -A none -t x4 | cut -d ' ' -f 2)"
        echo "${POOL_HOSTID}"
    fi

    cat <<EOF > /mnt/etc/nixos/configuration.nix
{ ... }:
{ imports = [
./hardware-configuration.nix
];
networking.hostId = "${POOL_HOSTID}";
}
EOF
    sed -i "/imports/a ../..${NIXCFG_LOCATION}hosts/${NIXCFG_HOST}" \
        /mnt/etc/nixos/configuration.nix

    if [[ ${DBG} == "" ]]
    then
        echo "executing nixos-install --root /mnt"
        nixos-install --root /mnt ||  exit
    fi
}

__thank_you() {
    cat <<EOF
NNNNNNNN        NNNNNNNNIIIIIIIIIIXXXXXXX       XXXXXXX
N:::::::N       N::::::NI::::::::IX:::::X       X:::::X
N::::::::N      N::::::NI::::::::IX:::::X       X:::::X
N:::::::::N     N::::::NII::::::IIX::::::X     X::::::X
N::::::::::N    N::::::N  I::::I  XXX:::::X   X:::::XXX
N:::::::::::N   N::::::N  I::::I     X:::::X X:::::X
N:::::::N::::N  N::::::N  I::::I      X:::::X:::::X
N::::::N N::::N N::::::N  I::::I       X:::::::::X
N::::::N  N::::N:::::::N  I::::I       X:::::::::X
N::::::N   N:::::::::::N  I::::I      X:::::X:::::X
N::::::N    N::::::::::N  I::::I     X:::::X X:::::X
N::::::N     N:::::::::N  I::::I  XXX:::::X   X:::::XXX
N::::::N      N::::::::NII::::::IIX::::::X     X::::::X
N::::::N       N:::::::NI::::::::IX:::::X       X:::::X
N::::::N        N::::::NI::::::::IX:::::X       X:::::X
NNNNNNNN         NNNNNNNIIIIIIIIIIXXXXXXX       XXXXXXX
EOF


    if [[ ${USE_ZSWAP} == "true" ]]
       then
           swapoff /dev/zvol/${POOL_NAME}/SWAP/swap0
    fi
    echo "Unmounting /mnt"
    umount /mnt/home
    umount /mnt/tmp
    umount /mnt
    zpool export ${POOL_NAME}

    read -p "Finished. Reboot now? (Y or N) " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        reboot
    fi

    exit
}

__uefi_or_legacy       # check for legacy or uefi bios
__initial_warning      # warn user of potential doom
__bootstrap_zfs        # install zfs if needed to the livedisk
__bootstrap_git        # install git if needed to the livedisk
__switch_if_needed     # reconfigure nix livedisk if needed
__get_custom_nixcfg    # download the host machine configuration
__disk_prep            # use sgdisk and wipefs to cleanup old disks
__zpool_create         # create the zpool, make gpt bios boot partition
__datasets_create      # create a zfs dataset layout
__zfs_auto_snapshot    # set com.sun:auto-snapshot properties
__bootstrap_nixcfg     # bootstrap the users custom nix configurations
__thank_you            # May you have a Happy Hacking. :)
